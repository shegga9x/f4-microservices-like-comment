<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
    <!-- Create temp tables -->
    <changeSet id="202506190001-1" author="jhipster">
        <comment>Create temp_reel_ids table only if it doesn't exist</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS temp_reel_ids (id VARCHAR(36));
        </sql>
    </changeSet>
    <changeSet id="202506190001-1a" author="jhipster">
        <comment>Create temp_feed_ids table only if it doesn't exist</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS temp_feed_ids (id VARCHAR(36));
        </sql>
    </changeSet>
    <changeSet id="202506190001-1b" author="jhipster">
        <comment>Create temp_user_ids table</comment>
        <sql>
            CREATE TABLE IF NOT EXISTS temp_user_ids (id VARCHAR(36));
        </sql>
    </changeSet>
    <!-- Load CSVs -->
    <changeSet id="202506190001-2" author="jhipster">
        <comment>Load reel IDs from CSV</comment>
        <sql>
            LOAD DATA LOCAL INFILE '${csv_path}/reel_ids.csv'
            INTO TABLE temp_reel_ids
            FIELDS TERMINATED BY ','
            LINES TERMINATED BY '\n'
            IGNORE 1 ROWS (id);
        </sql>
    </changeSet>
    <changeSet id="202506190001-2a" author="jhipster">
        <comment>Load feed IDs from CSV</comment>
        <sql>
            LOAD DATA LOCAL INFILE '${csv_path}/feed_ids.csv'
            INTO TABLE temp_feed_ids
            FIELDS TERMINATED BY ','
            LINES TERMINATED BY '\n'
            IGNORE 1 ROWS (id);
        </sql>
    </changeSet>
    <changeSet id="202506190001-2b" author="jhipster">
        <comment>Load user IDs from CSV</comment>
        <sql>
            LOAD DATA LOCAL INFILE '${csv_path}/user_ids.csv'
            INTO TABLE temp_user_ids
            FIELDS TERMINATED BY ','
            LINES TERMINATED BY '\n'
            IGNORE 1 ROWS (id);
        </sql>
    </changeSet>
    <!-- Initialize round-robin state -->
    <changeSet id="202506190001-2c" author="jhipster">
        <comment>Initialize total user count for round-robin</comment>
        <sql>
            SELECT COUNT(*) INTO @total_users FROM temp_user_ids;
        </sql>
    </changeSet>
    <!-- Add unique constraint for likes -->
    <changeSet id="202506190001-2d-v2" author="jhipster">
        <comment>Add unique constraint to prevent duplicate likes</comment>
        <addUniqueConstraint 
            tableName="jhi_like"
            columnNames="parent_id, user_id"
            constraintName="uk_like_parentid_userid"/>
    </changeSet>
    <!-- Insert comments for reels -->
    <changeSet id="202506190001-3a" author="jhipster">
        <comment>Insert fake comments for each reel</comment>
        <sql>
        SET @rn := 0;
        SET @ur := 0;

        INSERT INTO comment (
            id, parent_id, parent_type, user_id,
            content, created_at, updated_at,mentions
        )
        SELECT
            UUID(), r.id, 'reel', u.id,
            CONCAT('This is an autogenerated comment for reel #', r.rn),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 180) DAY),  -- created_at
            NOW(),                                               -- updated_at
            NULL                                                 -- mentions
        FROM (
            SELECT id, (@rn := @rn + 1) AS rn
            FROM temp_reel_ids, (SELECT @rn := 0) x
            LIMIT 500000
        ) r
        JOIN (
            SELECT id, (@ur := @ur + 1) AS rn
            FROM temp_user_ids, (SELECT @ur := 0) x
        ) u ON (r.rn - 1) % @total_users = (u.rn - 1);
    </sql>
    </changeSet>
    <!-- Insert comments for feeds -->
    <changeSet id="202506190001-3b" author="jhipster">
        <comment>Insert fake comments for each feed</comment>
        <sql>
        SET @rn := 0;
        SET @ur := 0;

        INSERT INTO comment (
            id, parent_id, parent_type, user_id,
            content, created_at, updated_at,mentions
        )
        SELECT
            UUID(), f.id, 'feed', u.id,
            CONCAT('This is an autogenerated comment for feed #', f.rn),
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 180) DAY),  -- created_at
            NOW(),                                               -- updated_at
            NULL                                                 -- mentions (nullable)
        FROM (
            SELECT id, (@rn := @rn + 1) AS rn
            FROM temp_feed_ids, (SELECT @rn := 0) x
            LIMIT 500000
        ) f
        JOIN (
            SELECT id, (@ur := @ur + 1) AS rn
            FROM temp_user_ids, (SELECT @ur := 0) x
        ) u ON (f.rn - 1) % @total_users = (u.rn - 1);
    </sql>
    </changeSet>
    <!-- Insert likes for reels -->
    <changeSet id="202506190001-3c" author="jhipster">
        <comment>Insert fake likes for reels</comment>
        <sql>
            SET @rn := 0;
            SET @ur := 0;

            INSERT INTO jhi_like (
                id, parent_id, parent_type, user_id, created_at
            )
            SELECT
                UUID(), r.id, 'reel', u.id,
                DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 180) DAY)
            FROM (
                SELECT id, (@rn := @rn + 1) AS rn
                FROM temp_reel_ids
                LIMIT 500000
            ) r
            JOIN (
                SELECT id, (@ur := @ur + 1) AS rn
                FROM temp_user_ids, (SELECT @ur := 0) x
            ) u
            ON (r.rn - 1) % @total_users = (u.rn - 1);
        </sql>
    </changeSet>
    <!-- Insert likes for feeds -->
    <changeSet id="202506190001-3d" author="jhipster">
        <comment>Insert fake likes for feeds</comment>
        <sql>
            SET @rn := 0;
            SET @ur := 0;

            INSERT INTO jhi_like (
                id, parent_id, parent_type, user_id, created_at
            )
            SELECT
                UUID(), f.id, 'feed', u.id,
                DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 180) DAY)
            FROM (
                SELECT id, (@rn := @rn + 1) AS rn
                FROM temp_feed_ids
                LIMIT 500000
            ) f
            JOIN (
                SELECT id, (@ur := @ur + 1) AS rn
                FROM temp_user_ids, (SELECT @ur := 0) x
            ) u
            ON (f.rn - 1) % @total_users = (u.rn - 1);
        </sql>
    </changeSet>
    <!-- Cleanup -->
    <changeSet id="202506190001-4" author="jhipster">
        <comment>Drop temp tables</comment>
        <sql>
            DROP TABLE IF EXISTS temp_reel_ids;
            DROP TABLE IF EXISTS temp_feed_ids;
            DROP TABLE IF EXISTS temp_user_ids;
        </sql>
    </changeSet>
</databaseChangeLog>
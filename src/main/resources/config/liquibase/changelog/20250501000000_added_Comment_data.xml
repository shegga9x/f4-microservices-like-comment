<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
    <!--
        Add 1 million records in batches using SQL instead of CSV loading
        This is much more efficient for large data sets
        
        IMPORTANT: This will only run when you specifically include the "bulk-data" context
        For example: ./mvnw liquibase:update -Dliquibase.contexts=bulk-data
    -->
    <!-- Batch 1: Records 1-100K -->
    <changeSet id="20250501000002-2" author="jhipster" context="faker">
        <comment>Loading bulk data for comments (Microservice corrected) - 500k records</comment>
        <sql>
        INSERT INTO comment (id, parent_id, parent_type, user_id, content, created_at)
        SELECT
            UUID() as id,
            -- CORRECTED: Generate a random UUID for the parent (reel). We can't query the reel service.
            UUID() as parent_id,
            'reel' as parent_type,
            -- Generate a random user_id
            UUID() as user_id,
            CONCAT('This is a great comment! #', numbers.n) as content,
            -- Generate a random timestamp as we don't know the parent's creation time
            DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 365) DAY) as created_at
        FROM
            -- This subquery generates 500,000 numbers to drive the insert
            (
                SELECT a.N + b.N * 10 + c.N * 100 + d.N * 1000 + e.N * 10000 + f.N * 100000 + 1 as n
                FROM
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c,
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) d,
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) e,
                    (SELECT 0 as N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4) f
                LIMIT 500000
            ) as numbers;
    </sql>
    </changeSet>
</databaseChangeLog>